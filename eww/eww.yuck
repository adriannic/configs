(defvar battery-icons
  '{"Charging":"󰂄","Discharging":["󰂎","󰁺","󰁻","󰁼","󰁽","󰁾","󰁿","󰂀","󰂁","󰂂","󰁹"]}'
)

(defpoll active-workspace
  :interval "0.1s"
  "hyprctl monitors -j | jq 'map({id, active:.activeWorkspace.id})'"
)

(defpoll time
  :interval "60s"
  "date +%H:%M"
)

(defpoll vol
  :interval "0.05s"
  "~/.config/eww/scripts/getvol.sh"
)

(defpoll brightness
  :interval "0.05s"
  "brightnessctl -m | cut -d',' -f4 | cut -d'%' -f1"
)

(defpoll battery
  :interval "1s"
  "cat /sys/class/power_supply/BAT0/capacity"
)

(defpoll battery-state
  :interval "1s"
  "cat /sys/class/power_supply/BAT0/status"
)

(defpoll cal-day
  :interval "1h"
  "date +%d"
)

(defpoll cal-month
  :interval "10h"
  "date +%B"
)

(defpoll cal-year
  :interval "10h"
  "date +%Y"
)

(deflisten song
  "~/.config/eww/scripts/getsong.sh"
)

(defwidget workspaces [n]
  (box
    :class "container"
    :space-evenly true
    :halign "start"
    :spacing 0
    (button :class "w${n}${active-workspace[n].active == '1' ? '1' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 1" " ")
    (button :class "w${n}${active-workspace[n].active == '2' ? '2' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 2" " ")
    (button :class "w${n}${active-workspace[n].active == '3' ? '3' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 3" " ")
    (button :class "w${n}${active-workspace[n].active == '4' ? '4' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 4" "󰈹 ")
    (button :class "w${n}${active-workspace[n].active == '5' ? '5' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 5" " ")
    (button :class "w${n}${active-workspace[n].active == '6' ? '6' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 6" "󰙯 ")
    (button :class "w${n}${active-workspace[n].active == '7' ? '7' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 7" " ")
    (button :class "w${n}${active-workspace[n].active == '8' ? '8' : ''}" :onclick "~/.config/hypr/scripts/workspaces.sh 8" " ")
  )
)

(defwidget clock [mon]
  (eventbox
    :class "clock"
    :onclick "eww open --toggle cal-window-${mon}"
    (button
      :class "util-button"
      :onclick "eww open --toggle cal-window-${mon}"
      time
    )
  )
)

(defwidget util-bar [mon]
  (box
    :class "container"
    :halign "end"
    :spacing 4
    (button
      :class "util-button"
      '${(battery-state == "Charging") ? battery-icons[battery-state] : battery-icons["Discharging"][(battery - battery%10)/10]} ${battery}%'
    )
    (eventbox
      :onscroll "brightnessctl set 5%$(if [[ {} = 'down' ]]; then echo - -; else echo '+'; fi)"
      (button
        :class "util-button"
        :onclick ""
        :onmiddleclick ""
        "󰃟 ${brightness}%"
      )
    )
    (eventbox
      :onscroll "wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%$(if [[ {} = 'down' ]]; then echo - -; else echo '+'; fi)"
      (button
        :class "util-button"
        :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
        :onmiddleclick "bash ~/.config/eww/scripts/pulsemixer.sh"
        {vol[0].muted == 1 ? '󰖁 MUTE' : ' ${vol[0].volume}%'}
      )
    )
    (eventbox
      :onscroll "wpctl set-volume -l 1 @DEFAULT_AUDIO_SOURCE@ 5%$(if [[ {} = 'down' ]]; then echo - -; else echo '+'; fi)"
      (button
        :class "util-button"
        :onclick "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
        :onmiddleclick "bash ~/.config/eww/scripts/pulsemixer.sh"
        {vol[1].muted == 1 ? ' MUTE' : ' ${vol[1].volume}%'}
      )
    )
    (clock
      :mon mon
    )
  )
)

(defwidget player []
  (box
    :class "container"
    :halign "center"
    (button
      :class "util-button"
      :onclick "playerctl play-pause"
      song
    )
  )
)

(defwidget cal []
  (box
    :class "cal-box"
    (calendar
      :day cal-day
      :month cal-month
      :year cal-year
      :show-week-numbers true
    )
  )
)

(defwindow cal-window-left
  :monitor 0
  :geometry (geometry
    :x "85%"
    :y "76%"
    :width "15%"
    :height "19%"
  )
  :stacking "overlay"
  :focusable false
  (cal)
)

;; (defwindow bar-left
;;   :monitor 0
;;   :geometry (geometry
;;     :x "0px"
;;     :y "0px"
;;     :width "100%"
;;     :height "5%"
;;     :anchor "bottom center"
;;   )
;;   :stacking "fg"
;;   :exclusive true
;;   :focusable false
;;   (centerbox
;;     (workspaces
;;       :n 0
;;     )
;;     (player)
;;     (util-bar
;;       :mon "left"
;;     )
;;   )
;; )

(defwindow cal-window-right
  :monitor 1
  :geometry (geometry
    :x "85%"
    :y "76%"
    :width "15%"
    :height "10%"
  )
  :stacking "overlay"
  :focusable false
  (cal)
)

;; (defwindow bar-right
;;   :monitor 1
;;   :geometry (geometry
;;     :x "0px"
;;     :y "0px"
;;     :width "100%"
;;     :height "5%"
;;     :anchor "bottom center"
;;   )
;;   :stacking "fg"
;;   :exclusive true
;;   :focusable false
;;   (centerbox
;;     (workspaces
;;       :n 1
;;     )
;;     (player)
;;     (util-bar
;;       :mon "right"
;;     )
;;   )
;; )

(defwindow utils-left
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "-56px"
    :height "56"
    :anchor "bottom right"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  (util-bar
    :mon "left"
  )
)

(defwindow utils-right
  :monitor 1
  :geometry (geometry
    :x "0px"
    :y "-56px"
    :height "56"
    :anchor "bottom right"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  (util-bar
    :mon "right"
  )
)

(defwindow workspace-left
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "-56px"
    :height "56"
    :anchor "bottom left"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  (workspaces
    :n 0
  )
)

(defwindow workspace-right
  :monitor 1
  :geometry (geometry
    :x "0px"
    :y "-56px"
    :height "56"
    :anchor "bottom left"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  (workspaces
    :n 1
  )
)

(defwindow emulation-station
  :monitor 0
  :geometry (geometry
    :x "1468px"
    :y "268px"
    :width "121px"
    :height "88px"
  )
  :stacking "bg"
  :exclusive false
  :focusable false
  (box
    :class "frame-container"
    (button
      :class "frame"
      :onclick "emulationstation &"
      "EMU"
    )
  )
)
